} else {
s_m <- strsplit(s_h[[1]][1], "m")
}
if (length(s_m[[1]]) > 1) {
m <- m + (as.integer(s_m[[1]][1]))
}
#if (m == 0) {
#  m <- as.integer(strsplit(s, "s")[[1]][1]) / 60
#}
return(m)
}
mean(unlist(lapply(chunks16, format_time)))
mean(unlist(lapply(chunks512, format_time)))
setwd("/home/heumos/QBiC/Promotion/TAC/LaTeX/pangenome_eval/")
chunks1 <- c("2d 16h 2m 15s")
chunks2 <- c("1d 8h 11m 57s", "1d 8h 18m 54s")
chunks4 <- c("16h 1m 47s", "19h 5m 43s", "19h 22m 49s", "19h 33m 6s")
chunks8 <- read.table("8chunks_ALIGN.tsv", sep = "\t", as.is = T)[c(9:16),]
chunks16 <- read.table("16chunks_ALIGN.tsv", sep = "\t", as.is = T)$V1
chunks32 <- read.table("32chunks_ALIGN.tsv", sep = "\t", as.is = T)$V1
chunks64 <- read.table("64chunks_ALIGN.tsv", sep = "\t", as.is = T)$V1
chunks128 <- read.table("128chunks_ALIGN.tsv", sep = "\t", as.is = T)$V1
chunks256 <- read.table("256chunks_ALIGN.tsv", sep = "\t", as.is = T)$V1
chunks512 <- read.table("512chunks_ALIGN.tsv", sep = "\t", as.is = T)$V1
chunks1024 <- read.table("1024chunks_ALIGN.tsv", sep = "\t", as.is = T)$V1
# function to iterate: normalize to minutes, then take the mean and collapse in one value (
# in the future some kind of box plot for e.g. 1024 chunks, but not for this report
format_time <- function(s) {
m <- 0
s_d <- strsplit(s, "d")
# TODO IF!
if (length(s_d[[1]]) > 1) {
m <- m + (as.integer(s_d[[1]][1])*1440)
s_h <- strsplit(s_d[[1]][2], "h")
} else {
s_h <- strsplit(s_d[[1]][1], "h")
}
if (length(s_h[[1]]) > 1) {
m <- m + (as.integer(s_h[[1]][1])*60)
s_m <- strsplit(s_h[[1]][2], "m")
} else {
s_m <- strsplit(s_h[[1]][1], "m")
}
if (length(s_m[[1]]) > 1) {
m <- m + (as.integer(s_m[[1]][1]))
}
#if (m == 0) {
#  m <- as.integer(strsplit(s, "s")[[1]][1]) / 60
#}
return(m)
}
mean(unlist(lapply(chunks16, format_time)))
mean(unlist(lapply(chunks512, format_time)))
chunks1 <- format_time(chunks1)
chunks2 <- mean(unlist(lapply(chunks2, format_time)))
chunks8 <- mean(unlist(lapply(chunks8, format_time)))
chunks16 <- mean(unlist(lapply(chunks16, format_time)))
chunks32 <- mean(unlist(lapply(chunks32, format_time)))
chunks64 <- mean(unlist(lapply(chunks64, format_time)))
chunks128 <- mean(unlist(lapply(chunks128, format_time)))
chunks256 <- mean(unlist(lapply(chunks256, format_time)))
chunks512 <- mean(unlist(lapply(chunks512, format_time)))
chunks4 <- mean(unlist(lapply(chunks4, format_time)))
chunks1024 <- mean(unlist(lapply(chunks1024, format_time)))
chunky_boy <- c(chunks1, chunks2, chunks4, chunks8, chunks16, chunks32, chunks64, chunks128, chunks256, chunks512, chunks1024)
texty_boy <- c("1", "2", "4", "8", "16", "32", "64", "128", "256", "512", "1024")
df <- data.frame(chunky_boy)
df$texty_boy <- texty_boy
df$texty_boy <- as.character(df$texty_boy)
df$texty_boy <- factor(df$texty_boy, levels=unique(df$texty_boy))
g <- ggplot(df, aes(group = 1)) +
aes(x = texty_boy, y = chunky_boy) +
geom_point() +
scale_y_log10() +
xlab("number of chunks") +
ylab("time in minutes (log10 scale)") +
geom_line() +
theme(text = element_text(size=14))
g
require(ggplot2)
setwd("/home/heumos/QBiC/Promotion/TAC/LaTeX/pangenome_eval/")
chunks1 <- c("2d 16h 2m 15s")
chunks2 <- c("1d 8h 11m 57s", "1d 8h 18m 54s")
chunks4 <- c("16h 1m 47s", "19h 5m 43s", "19h 22m 49s", "19h 33m 6s")
chunks8 <- read.table("8chunks_ALIGN.tsv", sep = "\t", as.is = T)[c(9:16),]
chunks16 <- read.table("16chunks_ALIGN.tsv", sep = "\t", as.is = T)$V1
chunks32 <- read.table("32chunks_ALIGN.tsv", sep = "\t", as.is = T)$V1
chunks64 <- read.table("64chunks_ALIGN.tsv", sep = "\t", as.is = T)$V1
chunks128 <- read.table("128chunks_ALIGN.tsv", sep = "\t", as.is = T)$V1
chunks256 <- read.table("256chunks_ALIGN.tsv", sep = "\t", as.is = T)$V1
chunks512 <- read.table("512chunks_ALIGN.tsv", sep = "\t", as.is = T)$V1
chunks1024 <- read.table("1024chunks_ALIGN.tsv", sep = "\t", as.is = T)$V1
# function to iterate: normalize to minutes, then take the mean and collapse in one value (
# in the future some kind of box plot for e.g. 1024 chunks, but not for this report
format_time <- function(s, cond) {
m <- 0
s_d <- strsplit(s, "d")
# TODO IF!
if (length(s_d[[1]]) > 1) {
m <- m + (as.integer(s_d[[1]][1])*1440)
s_h <- strsplit(s_d[[1]][2], "h")
} else {
s_h <- strsplit(s_d[[1]][1], "h")
}
if (length(s_h[[1]]) > 1) {
m <- m + (as.integer(s_h[[1]][1])*60)
s_m <- strsplit(s_h[[1]][2], "m")
} else {
s_m <- strsplit(s_h[[1]][1], "m")
}
if (length(s_m[[1]]) > 1) {
m <- m + (as.integer(s_m[[1]][1]))
}
if (cond) {
if (m == 0) {
m <- as.integer(strsplit(s, "s")[[1]][1]) / 60
}
}
return(m)
}
mean(unlist(lapply(chunks16, format_time)))
mean(unlist(lapply(chunks512, format_time)))
# function to iterate: normalize to minutes, then take the mean and collapse in one value (
# in the future some kind of box plot for e.g. 1024 chunks, but not for this report
format_time <- function(s, cond=F) {
m <- 0
s_d <- strsplit(s, "d")
# TODO IF!
if (length(s_d[[1]]) > 1) {
m <- m + (as.integer(s_d[[1]][1])*1440)
s_h <- strsplit(s_d[[1]][2], "h")
} else {
s_h <- strsplit(s_d[[1]][1], "h")
}
if (length(s_h[[1]]) > 1) {
m <- m + (as.integer(s_h[[1]][1])*60)
s_m <- strsplit(s_h[[1]][2], "m")
} else {
s_m <- strsplit(s_h[[1]][1], "m")
}
if (length(s_m[[1]]) > 1) {
m <- m + (as.integer(s_m[[1]][1]))
}
if (cond) {
if (m == 0) {
m <- as.integer(strsplit(s, "s")[[1]][1]) / 60
}
}
return(m)
}
mean(unlist(lapply(chunks16, format_time)))
mean(unlist(lapply(chunks512, format_time)))
chunks1 <- format_time(chunks1)
chunks2 <- mean(unlist(lapply(chunks2, format_time)))
chunks8 <- mean(unlist(lapply(chunks8, format_time)))
chunks16 <- mean(unlist(lapply(chunks16, format_time)))
chunks32 <- mean(unlist(lapply(chunks32, format_time)))
chunks64 <- mean(unlist(lapply(chunks64, format_time)))
chunks128 <- mean(unlist(lapply(chunks128, format_time)))
chunks256 <- mean(unlist(lapply(chunks256, format_time)))
chunks512 <- mean(unlist(lapply(chunks512, format_time)))
chunks4 <- mean(unlist(lapply(chunks4, format_time)))
chunks1024 <- mean(unlist(lapply(chunks1024, format_time)))
chunky_boy <- c(chunks1, chunks2, chunks4, chunks8, chunks16, chunks32, chunks64, chunks128, chunks256, chunks512, chunks1024)
texty_boy <- c("1", "2", "4", "8", "16", "32", "64", "128", "256", "512", "1024")
df <- data.frame(chunky_boy)
df$texty_boy <- texty_boy
df$texty_boy <- as.character(df$texty_boy)
df$texty_boy <- factor(df$texty_boy, levels=unique(df$texty_boy))
g <- ggplot(df, aes(group = 1)) +
aes(x = texty_boy, y = chunky_boy) +
geom_point() +
scale_y_log10() +
xlab("number of chunks") +
ylab("time in minutes (log10 scale)") +
geom_line() +
theme(text = element_text(size=14))
g
ggsave("by_chunks_ALIGN.pdf", g)
ggsave("by_chunks_ALIGN.png", g)
haps2 <- format_time(read.table("2haps_ALIGN.tsv", sep = "\t", as.is = T)$V1,T)
haps4 <- format_time(read.table("4haps_ALIGN.tsv", sep = "\t", as.is = T)$V1,T)
haps8 <- format_time(read.table("8haps_ALIGN.tsv", sep = "\t", as.is = T)$V1,T)
haps16 <- format_time(read.table("16haps_ALIGN.tsv", sep = "\t", as.is = T)$V1,T)
haps32 <- format_time(read.table("32haps_ALIGN.tsv", sep = "\t", as.is = T)$V1,T)
haps64 <- format_time(read.table("64haps_ALIGN.tsv", sep = "\t", as.is = T)$V1,T)
haps128 <- format_time(read.table("128haps_ALIGN.tsv", sep = "\t", as.is = T)$V1,T)
haps256 <- format_time(read.table("256haps_ALIGN.tsv", sep = "\t", as.is = T)$V1,T)
haps512 <- format_time(read.table("512haps_ALIGN.tsv", sep = "\t", as.is = T)$V1,T)
haps1024 <- format_time(read.table("1024haps_ALIGN.tsv", sep = "\t", as.is = T)$V1,T)
happy_boy <- c(haps2, haps4, haps8, haps16, haps32, haps64, haps128, haps256, haps512, haps1024)
texty_boy <- c("2", "4", "8", "16", "32", "64", "128", "256", "512", "1024")
df <- data.frame(happy_boy)
df$texty_boy <- texty_boy
df$texty_boy <- as.character(df$texty_boy)
df$texty_boy <- factor(df$texty_boy, levels=unique(df$texty_boy))
g <- ggplot(df, aes(group = 1)) +
aes(x = texty_boy, y = happy_boy) +
geom_point() +
xlab("number of haplotypes") +
ylab("time in seconds (log10 scale") +
scale_y_log10() +
geom_line() +
theme(text = element_text(size=14))
g
ggsave("by_haps_ALIGN.pdf", g)
ggsave("by_haps_ALIGN.png", g)
require(ggplot2)
setwd("/home/heumos/QBiC/Promotion/TAC/LaTeX/pangenome_eval/")
chunks1 <- c("2d 16h 2m 15s")
chunks2 <- c("1d 8h 11m 57s", "1d 8h 18m 54s")
chunks4 <- c("16h 1m 47s", "19h 5m 43s", "19h 22m 49s", "19h 33m 6s")
chunks8 <- read.table("8chunks_ALIGN.tsv", sep = "\t", as.is = T)[c(9:16),]
chunks16 <- read.table("16chunks_ALIGN.tsv", sep = "\t", as.is = T)$V1
chunks32 <- read.table("32chunks_ALIGN.tsv", sep = "\t", as.is = T)$V1
chunks64 <- read.table("64chunks_ALIGN.tsv", sep = "\t", as.is = T)$V1
chunks128 <- read.table("128chunks_ALIGN.tsv", sep = "\t", as.is = T)$V1
chunks256 <- read.table("256chunks_ALIGN.tsv", sep = "\t", as.is = T)$V1
chunks512 <- read.table("512chunks_ALIGN.tsv", sep = "\t", as.is = T)$V1
chunks1024 <- read.table("1024chunks_ALIGN.tsv", sep = "\t", as.is = T)$V1
# function to iterate: normalize to minutes, then take the mean and collapse in one value (
# in the future some kind of box plot for e.g. 1024 chunks, but not for this report
format_time <- function(s, cond=F) {
m <- 0
s_d <- strsplit(s, "d")
# TODO IF!
if (length(s_d[[1]]) > 1) {
m <- m + (as.integer(s_d[[1]][1])*1440)
s_h <- strsplit(s_d[[1]][2], "h")
} else {
s_h <- strsplit(s_d[[1]][1], "h")
}
if (length(s_h[[1]]) > 1) {
m <- m + (as.integer(s_h[[1]][1])*60)
s_m <- strsplit(s_h[[1]][2], "m")
} else {
s_m <- strsplit(s_h[[1]][1], "m")
}
if (length(s_m[[1]]) > 1) {
m <- m + (as.integer(s_m[[1]][1]))
}
if (cond) {
if (m == 0) {
m <- as.integer(strsplit(s, "s")[[1]][1]) / 60
}
}
return(m)
}
chunks1 <- format_time(chunks1)
chunks2 <- mean(unlist(lapply(chunks2, format_time)))
chunks8 <- mean(unlist(lapply(chunks8, format_time)))
chunks16 <- mean(unlist(lapply(chunks16, format_time)))
chunks32 <- mean(unlist(lapply(chunks32, format_time)))
chunks64 <- mean(unlist(lapply(chunks64, format_time)))
chunks128 <- mean(unlist(lapply(chunks128, format_time)))
chunks256 <- mean(unlist(lapply(chunks256, format_time)))
chunks512 <- mean(unlist(lapply(chunks512, format_time)))
chunks4 <- mean(unlist(lapply(chunks4, format_time)))
chunks1024 <- mean(unlist(lapply(chunks1024, format_time)))
chunky_boy <- c(chunks1, chunks2, chunks4, chunks8, chunks16, chunks32, chunks64, chunks128, chunks256, chunks512, chunks1024)
texty_boy <- c("1", "2", "4", "8", "16", "32", "64", "128", "256", "512", "1024")
df <- data.frame(chunky_boy)
df$texty_boy <- texty_boy
df$texty_boy <- as.character(df$texty_boy)
df$texty_boy <- factor(df$texty_boy, levels=unique(df$texty_boy))
g <- ggplot(df, aes(group = 1)) +
aes(x = texty_boy, y = chunky_boy) +
geom_point() +
scale_y_log10() +
xlab("number of chunks") +
ylab("time in minutes (log10 scale)") +
geom_line() +
theme(text = element_text(size=14))
g
ggsave("by_chunks_ALIGN.pdf", g)
ggsave("by_chunks_ALIGN.png", g)
haps2 <- format_time(read.table("2haps_ALIGN.tsv", sep = "\t", as.is = T)$V1,T)
haps4 <- format_time(read.table("4haps_ALIGN.tsv", sep = "\t", as.is = T)$V1,T)
haps8 <- format_time(read.table("8haps_ALIGN.tsv", sep = "\t", as.is = T)$V1,T)
haps16 <- format_time(read.table("16haps_ALIGN.tsv", sep = "\t", as.is = T)$V1,T)
haps32 <- format_time(read.table("32haps_ALIGN.tsv", sep = "\t", as.is = T)$V1,T)
haps64 <- format_time(read.table("64haps_ALIGN.tsv", sep = "\t", as.is = T)$V1,T)
haps128 <- format_time(read.table("128haps_ALIGN.tsv", sep = "\t", as.is = T)$V1,T)
haps256 <- format_time(read.table("256haps_ALIGN.tsv", sep = "\t", as.is = T)$V1,T)
haps512 <- format_time(read.table("512haps_ALIGN.tsv", sep = "\t", as.is = T)$V1,T)
haps1024 <- format_time(read.table("1024haps_ALIGN.tsv", sep = "\t", as.is = T)$V1,T)
happy_boy <- c(haps2, haps4, haps8, haps16, haps32, haps64, haps128, haps256, haps512, haps1024)
texty_boy <- c("2", "4", "8", "16", "32", "64", "128", "256", "512", "1024")
df <- data.frame(happy_boy)
df$texty_boy <- texty_boy
df$texty_boy <- as.character(df$texty_boy)
df$texty_boy <- factor(df$texty_boy, levels=unique(df$texty_boy))
g <- ggplot(df, aes(group = 1)) +
aes(x = texty_boy, y = happy_boy) +
geom_point() +
xlab("number of haplotypes") +
ylab("time in seconds (log10 scale") +
scale_y_log10() +
geom_line() +
theme(text = element_text(size=14))
g
ggsave("by_haps_ALIGN.pdf", g)
ggsave("by_haps_ALIGN.png", g)
#### co2 chunks ####
co2 <- read.table("co2.tab", as.is = T, header = T, sep = "\t", check.names = F)
View(co2)
g <- ggplot(co2, aes(group = 1)) +
aes(x = emissions_in_kg, y = chunks) +
geom_point() +
xlab("number of chunks") +
ylab("emissions in kg") +
geom_line() +
theme(text = element_text(size=14))
g
g <- ggplot(co2, aes(group = 1)) +
aes(x = chunks, y = emissions_in_kg) +
geom_point() +
xlab("number of chunks") +
ylab("emissions in kg") +
geom_line() +
theme(text = element_text(size=14))
g
g <- ggplot(co2, aes(group = 1)) +
aes(x = chunks, y = as.character(emissions_in_kg)) +
geom_point() +
xlab("number of chunks") +
ylab("emissions in kg") +
geom_line() +
theme(text = element_text(size=14))
g
as.character(emissions_in_kg)
g <- ggplot(co2, aes(group = 1)) +
aes(x = as.character(chunks), y = emissions_in_kg) +
geom_point() +
xlab("number of chunks") +
ylab("emissions in kg") +
geom_line() +
theme(text = element_text(size=14))
g
co2[order(co2$chunks),]
co2 <- co2[order(co2$chunks),]
g <- ggplot(co2, aes(group = 1)) +
aes(x = as.character(chunks), y = emissions_in_kg) +
geom_point() +
xlab("number of chunks") +
ylab("emissions in kg") +
geom_line() +
theme(text = element_text(size=14))
g
#### co2 chunks ####
co2 <- read.table("co2.tab", as.is = T, header = T, sep = "\t", check.names = F)
co2 <- co2[order(co2$chunks),]
g <- ggplot(co2, aes(group = 1)) +
aes(x = as.character(chunks), y = emissions_in_kg) +
geom_point() +
xlab("number of chunks") +
ylab("emissions in kg") +
geom_line() +
theme(text = element_text(size=14))
View(co2)
texty_boy <- c("1", texty_boy)
g <- ggplot(co2, aes(group = 1)) +
aes(x = texty_boy, y = emissions_in_kg) +
geom_point() +
xlab("number of chunks") +
ylab("emissions in kg") +
geom_line() +
theme(text = element_text(size=14))
g
g <- ggplot(co2, aes(group = 1)) +
aes(x = texty_boy, y = emissions_in_kg) +
geom_point() +
xlab("number of chunks") +
ylab("emissions in kg") +
geom_line() +
theme(text = element_text(size=14))
g
#### co2 chunks ####
co2 <- read.table("co2.tab", as.is = T, header = T, sep = "\t", check.names = F)
co2 <- co2[order(co2$chunks),]
texty_boy <- c("1", texty_boy)
texty_boy <- c("2", "4", "8", "16", "32", "64", "128", "256", "512", "1024")
texty_boy <- c("1", texty_boy)
#### co2 chunks ####
co2 <- read.table("co2.tab", as.is = T, header = T, sep = "\t", check.names = F)
co2 <- co2[order(co2$chunks),]
texty_boy <- c("2", "4", "8", "16", "32", "64", "128", "256", "512", "1024")
texty_boy <- c("1", texty_boy)
g <- ggplot(co2, aes(group = 1)) +
aes(x = texty_boy, y = emissions_in_kg) +
geom_point() +
xlab("number of chunks") +
ylab("emissions in kg") +
geom_line() +
theme(text = element_text(size=14))
g
g <- ggplot(co2, aes(group = 1)) +
aes(x = texty_boy, y = emissions_in_kg) +
geom_point() +
xlab("number of chunks") +
ylab("emissions in kg") +
geom_line() +
expand_limits(y = 0) #
theme(text = element_text(size=14))
g <- ggplot(co2, aes(group = 1)) +
aes(x = texty_boy, y = emissions_in_kg) +
geom_point() +
xlab("number of chunks") +
ylab("emissions in kg") +
geom_line() +
expand_limits(y = 0) +
theme(text = element_text(size=14))
g
#### co2 chunks ####
co2 <- read.table("co2.tab", as.is = T, header = T, sep = "\t", check.names = F)
co2 <- co2[order(co2$chunks),]
g <- ggplot(co2, aes(group = 1)) +
aes(x = chunks, y = emissions_in_kg) +
geom_point() +
xlab("number of chunks") +
ylab("emissions in kg") +
geom_line() +
expand_limits(y = 0) +
theme(text = element_text(size=14))
g
co2$chunks <- as.character(co2$chunks)
#### co2 chunks ####
co2 <- read.table("co2.tab", as.is = T, header = T, sep = "\t", check.names = F)
co2 <- co2[order(co2$chunks),]
co2$chunks <- as.character(co2$chunks)
g <- ggplot(co2, aes(group = 1)) +
aes(x = chunks, y = emissions_in_kg) +
geom_point() +
xlab("number of chunks") +
ylab("emissions in kg") +
geom_line() +
expand_limits(y = 0) +
theme(text = element_text(size=14))
g
co2$chunks <- as.factor(co2$chunks)
g <- ggplot(co2, aes(group = 1)) +
aes(x = chunks, y = emissions_in_kg) +
geom_point() +
xlab("number of chunks") +
ylab("emissions in kg") +
geom_line() +
expand_limits(y = 0) +
theme(text = element_text(size=14))
g
#### co2 chunks ####
co2 <- read.table("co2.tab", as.is = T, header = T, sep = "\t", check.names = F)
co2 <- co2[order(co2$chunks),]
co2$chunks <- as.character(co2$chunks)
co2$chunks <- as.factor(co2$chunks)
g <- ggplot(co2, aes(group = 1)) +
aes(x = chunks, y = emissions_in_kg) +
geom_point() +
xlab("number of chunks") +
ylab("emissions in kg") +
geom_line() +
expand_limits(y = 0) +
theme(text = element_text(size=14))
g
co2$chunks
#### co2 chunks ####
co2 <- read.table("co2.tab", as.is = T, header = T, sep = "\t", check.names = F)
co2 <- co2[order(co2$chunks),]
co2$chunks <- as.character(co2$chunks)
co2$chunks <- as.factor(co2$chunks, levels = co2$chunks)
g <- ggplot(co2, aes(group = 1)) +
aes(x = chunks, y = emissions_in_kg) +
geom_point() +
xlab("number of chunks") +
ylab("emissions in kg") +
geom_line() +
expand_limits(y = 0) +
theme(text = element_text(size=14))
#### co2 chunks ####
co2 <- read.table("co2.tab", as.is = T, header = T, sep = "\t", check.names = F)
co2 <- co2[order(co2$chunks),]
co2$chunks <- as.character(co2$chunks)
co2$chunks <- factor(co2$chunks, levels = co2$chunks)
g <- ggplot(co2, aes(group = 1)) +
aes(x = chunks, y = emissions_in_kg) +
geom_point() +
xlab("number of chunks") +
ylab("emissions in kg") +
geom_line() +
expand_limits(y = 0) +
theme(text = element_text(size=14))
g
g <- ggplot(co2, aes(group = 1)) +
aes(x = chunks, y = emissions_in_kg) +
geom_point() +
xlab("number of chunks") +
ylab("emissions in kg") +
scale_x_continuous(breaks = scales::pretty_breaks(n = 10)) +
geom_line() +
expand_limits(y = 0) +
theme(text = element_text(size=14))
g
g <- ggplot(co2, aes(group = 1)) +
aes(x = chunks, y = emissions_in_kg) +
geom_point() +
xlab("number of chunks") +
ylab("emissions in kg") +
geom_line() +
expand_limits(y = 0) +
theme(text = element_text(size=14))
g
ggsave("by_chunks_co2.pdf", g)
ggsave("by_chunks_co2.png", g)
